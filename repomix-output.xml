This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.bolt/ignore
.gitignore
api/movies-search.ts
index.html
package.json
public/vector---0-1.svg
public/vector---0.svg
public/vector---1.svg
README.md
src/App.tsx
src/components/ui/avatar.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/navigation-menu.tsx
src/components/ui/popover.tsx
src/components/ui/progress.tsx
src/components/ui/textarea.tsx
src/index.tsx
src/lib/utils.ts
src/screens/Dates/Dates.tsx
src/screens/Dates/index.ts
src/screens/Home/Home.tsx
src/screens/Home/index.ts
src/screens/Profile/index.ts
src/screens/Profile/Profile.tsx
src/screens/StitchDesign/sections/AddDateSection/AddDateSection.tsx
src/screens/StitchDesign/sections/AddDateSection/index.ts
src/screens/StitchDesign/sections/HeaderSection/HeaderSection.tsx
src/screens/StitchDesign/sections/HeaderSection/index.ts
src/screens/StitchDesign/sections/MainFormSection/index.ts
src/screens/StitchDesign/sections/MainFormSection/MainFormSection.tsx
src/screens/StitchDesign/sections/MovieSelectionSection/index.ts
src/screens/StitchDesign/sections/MovieSelectionSection/MovieSelectionSection.tsx
src/screens/StitchDesign/sections/PhotoUploadSection/index.ts
src/screens/StitchDesign/sections/PhotoUploadSection/PhotoUploadSection.tsx
src/screens/StitchDesign/sections/RatingsSection/index.ts
src/screens/StitchDesign/sections/RatingsSection/RatingsSection.tsx
src/screens/StitchDesign/sections/ReviewsSection/index.ts
src/screens/StitchDesign/sections/ReviewsSection/ReviewsSection.tsx
src/screens/StitchDesign/sections/UserInputSection/index.ts
src/screens/StitchDesign/sections/UserInputSection/UserInputSection.tsx
src/screens/StitchDesign/StitchDesign.tsx
src/screens/Wishlist/index.ts
src/screens/Wishlist/Wishlist.tsx
tailwind.config.js
tailwind.css
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".bolt/ignore">
src/components/ui/*
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Anima Project - Automatically generated by Anima</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <style>
      @import url("https://fonts.googleapis.com/css?family=Plus+Jakarta+Sans:500,700,400");
    </style>
    <link href="tailwind.css" rel="stylesheet" />
    <link href="tailwind.css" rel="stylesheet" />
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="./src/index.tsx"></script>
  </body>
</html>
</file>

<file path="public/vector---0-1.svg">
<svg width="6" height="11" viewBox="0 0 6 11" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 2.31594L6 3.09944e-06V7.63044C6 7.7682 5.91523 7.8918 5.7867 7.9414L0 10.175V2.31594Z" fill="white"/>
</svg>
</file>

<file path="public/vector---0.svg">
<svg width="15" height="17" viewBox="0 0 15 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.8296 11.8722C14.3959 11.1252 13.7513 9.01162 13.7513 6.25102C13.7513 2.79868 10.9526 0 7.50024 0C4.0479 0 1.24923 2.79868 1.24923 6.25102C1.24923 9.0124 0.603809 11.1252 0.170145 11.8722C-0.0552639 12.2588 -0.0569033 12.7363 0.165846 13.1244C0.388596 13.5125 0.801766 13.7519 1.24923 13.7522H4.43803C4.73535 15.2071 6.0153 16.2519 7.50024 16.2519C8.98519 16.2519 10.2651 15.2071 10.5625 13.7522H13.7513C14.1986 13.7516 14.6115 13.5121 14.8341 13.1241C15.0566 12.736 15.0549 12.2587 14.8296 11.8722ZM7.50024 15.0024C6.70573 15.0022 5.99761 14.5013 5.73277 13.7522H9.26772C9.00288 14.5013 8.29475 15.0022 7.50024 15.0024ZM1.24923 12.502C1.85089 11.4675 2.49943 9.07023 2.49943 6.25102C2.49943 3.48914 4.73837 1.2502 7.50024 1.2502C10.2621 1.2502 12.5011 3.48914 12.5011 6.25102C12.5011 9.06788 13.148 11.4651 13.7513 12.502H1.24923Z" fill="white"/>
</svg>
</file>

<file path="public/vector---1.svg">
<svg width="14" height="15" viewBox="0 0 14 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M7 2.04182L10.1374 3.17042L7 4.38146L3.86257 3.17042L7 2.04182ZM2 4.59532L6 6.13926V11.8545L2 10.3106V4.59532ZM8 11.8545V6.13926L12 4.59532V10.3106L8 11.8545ZM7.45133 0.078707C7.1596 -0.0262363 6.8404 -0.0262363 6.54867 0.078707L0.661513 2.19645C0.264633 2.33922 0 2.71566 0 3.13742V10.7679C0 11.319 0.339063 11.8133 0.853207 12.0118L6.6399 14.2453C6.87163 14.3348 7.12837 14.3348 7.3601 14.2453L13.1468 12.0118C13.6609 11.8133 14 11.319 14 10.7679V3.13742C14 2.71566 13.7354 2.33922 13.3385 2.19645L7.45133 0.078707Z" fill="white"/>
</svg>
</file>

<file path="src/App.tsx">
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { StitchDesign } from "./screens/StitchDesign/StitchDesign";
import { Home } from "./screens/Home/Home";
import { Wishlist } from "./screens/Wishlist/Wishlist";
import { Dates } from "./screens/Dates/Dates";
import { Profile } from "./screens/Profile/Profile";

export const App = (): JSX.Element => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/wishlist" element={<Wishlist />} />
        <Route path="/dates" element={<Dates />} />
        <Route path="/profile" element={<Profile />} />
        <Route path="/add-date" element={<StitchDesign />} />
      </Routes>
    </Router>
  );
};
</file>

<file path="src/components/ui/avatar.tsx">
"use client";

import * as AvatarPrimitive from "@radix-ui/react-avatar";
import * as React from "react";
import { cn } from "../../lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="src/components/ui/button.tsx">
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="src/components/ui/calendar.tsx">
import { ChevronLeftIcon, ChevronRightIcon } from "lucide-react";
import * as React from "react";
import { DayPicker } from "react-day-picker";
import { cn } from "../../lib/utils";
import { buttonVariants } from "./button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md",
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react";
import { cn } from "../../lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";
import { cn } from "../../lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="src/components/ui/label.tsx">
import * as LabelPrimitive from "@radix-ui/react-label";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDownIcon } from "lucide-react";
import * as React from "react";
import { cn } from "../../lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
</file>

<file path="src/components/ui/popover.tsx">
import * as PopoverPrimitive from "@radix-ui/react-popover";
import * as React from "react";
import { cn } from "../../lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };
</file>

<file path="src/components/ui/progress.tsx">
"use client";

import * as ProgressPrimitive from "@radix-ui/react-progress";
import * as React from "react";
import { cn } from "../../lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className,
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react";
import { cn } from "../../lib/utils";

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };
</file>

<file path="src/index.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { App } from "./App";

createRoot(document.getElementById("app") as HTMLElement).render(
  <StrictMode>
    <App />
  </StrictMode>,
);
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/screens/Dates/Dates.tsx">
import React from "react";
import { AddDateSection } from "../StitchDesign/sections/AddDateSection";
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card";
import { Progress } from "../../components/ui/progress";

export const Dates = (): JSX.Element => {
  const pastDates = [
    {
      movie: "The Enchanted Forest",
      date: "December 15, 2023",
      location: "AMC Theater",
      herRating: 5,
      hisRating: 4,
    },
    {
      movie: "Midnight in Paris",
      date: "November 28, 2023", 
      location: "Regal Cinema",
      herRating: 4,
      hisRating: 5,
    },
  ];

  return (
    <div className="flex flex-col bg-white min-h-screen">
      <div className="flex flex-col w-full bg-[#211111] min-h-screen">
        <AddDateSection />
        
        <div className="flex justify-center px-40 py-5 w-full">
          <div className="flex flex-col max-w-[960px] w-[960px] py-5">
            <div className="flex flex-wrap justify-around gap-[12px] p-4 w-full">
              <div className="flex flex-col w-72">
                <h1 className="font-bold text-white text-[32px] leading-10 font-['Plus_Jakarta_Sans',Helvetica]">
                  My Dates
                </h1>
                <p className="font-normal text-[#c69193] text-base font-['Plus_Jakarta_Sans',Helvetica] mt-2">
                  Your cinema date history and memories
                </p>
              </div>
            </div>

            <div className="grid gap-6 p-4">
              {pastDates.map((dateEntry, index) => (
                <Card key={index} className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica]">
                      {dateEntry.movie}
                    </CardTitle>
                    <p className="text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica]">
                      {dateEntry.date} · {dateEntry.location}
                    </p>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-white font-['Plus_Jakarta_Sans',Helvetica]">Her Rating</span>
                      <div className="flex items-center gap-4 flex-1 ml-4">
                        <Progress
                          value={dateEntry.herRating * 20}
                          className="h-1 flex-1 bg-[#663335] rounded-sm"
                          indicatorClassName="bg-[#e82833] rounded-sm"
                        />
                        <span className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-sm">
                          {dateEntry.herRating}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-white font-['Plus_Jakarta_Sans',Helvetica]">His Rating</span>
                      <div className="flex items-center gap-4 flex-1 ml-4">
                        <Progress
                          value={dateEntry.hisRating * 20}
                          className="h-1 flex-1 bg-[#663335] rounded-sm"
                          indicatorClassName="bg-[#e82833] rounded-sm"
                        />
                        <span className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-sm">
                          {dateEntry.hisRating}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/Dates/index.ts">
export { Dates } from "./Dates";
</file>

<file path="src/screens/Home/Home.tsx">
import React from "react";
import { Link } from "react-router-dom";
import { AddDateSection } from "../StitchDesign/sections/AddDateSection";
import { Button } from "../../components/ui/button";

export const Home = (): JSX.Element => {
  return (
    <div className="flex flex-col bg-white min-h-screen">
      <div className="flex flex-col w-full bg-[#211111] min-h-screen">
        <AddDateSection />
        
        <div className="flex justify-center px-40 py-5 w-full flex-1">
          <div className="flex flex-col max-w-[960px] w-[960px] py-5 items-center justify-center">
            <div className="text-center mb-8">
              <h1 className="font-bold text-white text-4xl leading-tight font-['Plus_Jakarta_Sans',Helvetica] mb-4">
                Welcome to CineDate
              </h1>
              <p className="font-normal text-[#c69193] text-lg font-['Plus_Jakarta_Sans',Helvetica] mb-8">
                Plan perfect movie dates and keep track of your cinema experiences
              </p>
            </div>
            
            <div className="flex gap-4">
              <Link to="/add-date">
                <Button className="bg-[#e82833] hover:bg-[#c62229] text-white px-8 py-3 rounded-lg font-bold">
                  Add New Date
                </Button>
              </Link>
              <Link to="/dates">
                <Button className="bg-[#472326] hover:bg-[#472326]/90 text-white px-8 py-3 rounded-lg font-bold">
                  View My Dates
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/Home/index.ts">
export { Home } from "./Home";
</file>

<file path="src/screens/Profile/index.ts">
export { Profile } from "./Profile";
</file>

<file path="src/screens/Profile/Profile.tsx">
import React from "react";
import { AddDateSection } from "../StitchDesign/sections/AddDateSection";
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card";
import { Avatar, AvatarImage } from "../../components/ui/avatar";

export const Profile = (): JSX.Element => {
  const profileStats = {
    totalDates: 12,
    favoriteGenre: "Romance",
    averageRating: 4.2,
    favoriteTheater: "AMC Theater",
  };

  return (
    <div className="flex flex-col bg-white min-h-screen">
      <div className="flex flex-col w-full bg-[#211111] min-h-screen">
        <AddDateSection />
        
        <div className="flex justify-center px-40 py-5 w-full">
          <div className="flex flex-col max-w-[960px] w-[960px] py-5">
            <div className="flex flex-wrap justify-around gap-[12px] p-4 w-full">
              <div className="flex flex-col w-72">
                <h1 className="font-bold text-white text-[32px] leading-10 font-['Plus_Jakarta_Sans',Helvetica]">
                  Profile
                </h1>
                <p className="font-normal text-[#c69193] text-base font-['Plus_Jakarta_Sans',Helvetica] mt-2">
                  Your cinema date statistics and preferences
                </p>
              </div>
            </div>

            <div className="p-4">
              <Card className="bg-[#472326] border-0 mb-6">
                <CardHeader className="flex flex-row items-center gap-4">
                  <Avatar className="w-16 h-16">
                    <AvatarImage src="..//depth-4--frame-2.png" alt="Profile picture" />
                  </Avatar>
                  <div>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-xl">
                      Cinema Enthusiast
                    </CardTitle>
                    <p className="text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica]">
                      Member since 2023
                    </p>
                  </div>
                </CardHeader>
              </Card>

              <div className="grid grid-cols-2 gap-4">
                <Card className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-lg">
                      Total Dates
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-[#e82833] font-bold text-2xl font-['Plus_Jakarta_Sans',Helvetica]">
                      {profileStats.totalDates}
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-lg">
                      Average Rating
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-[#e82833] font-bold text-2xl font-['Plus_Jakarta_Sans',Helvetica]">
                      {profileStats.averageRating}/5
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-lg">
                      Favorite Genre
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica]">
                      {profileStats.favoriteGenre}
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica] text-lg">
                      Favorite Theater
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica]">
                      {profileStats.favoriteTheater}
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/AddDateSection/AddDateSection.tsx">
import React from "react";
import { Link, useLocation } from "react-router-dom";
import { Avatar, AvatarImage } from "../../../../components/ui/avatar";
import {
  NavigationMenu,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
} from "../../../../components/ui/navigation-menu";

export const AddDateSection = (): JSX.Element => {
  const location = useLocation();

  // Navigation menu items data
  const navItems = [
    { label: "Home", href: "/" },
    { label: "Wishlist", href: "/wishlist" },
    { label: "Dates", href: "/dates" },
    { label: "Profile", href: "/profile" },
  ];

  return (
    <header className="flex items-center justify-between px-10 py-3 border-b border-[#e5e8ea] w-full bg-[#FF00FF]">
      {/* Logo and Brand */}
      <Link to="/" className="flex items-center gap-4">
        <div className="relative w-4 h-4">
          <img className="w-4 h-4" alt="CineDate Logo" src="/vector---1.svg" />
        </div>
        <h1 className="font-bold text-white text-lg font-['Plus_Jakarta_Sans',Helvetica]">
          CineDate
        </h1>
      </Link>

      {/* Navigation and User Profile */}
      <div className="flex items-center justify-end gap-8 flex-1">
        {/* Navigation Menu */}
        <NavigationMenu className="max-w-none">
          <NavigationMenuList className="flex gap-9">
            {navItems.map((item, index) => (
              <NavigationMenuItem key={index}>
                <NavigationMenuLink asChild>
                  <Link
                    to={item.href}
                    className={`font-medium text-sm font-['Plus_Jakarta_Sans',Helvetica] hover:text-white/80 transition-colors ${
                      location.pathname === item.href ? 'text-white font-bold' : 'text-white'
                    }`}
                  >
                    {item.label}
                  </Link>
                </NavigationMenuLink>
              </NavigationMenuItem>
            ))}
          </NavigationMenuList>
        </NavigationMenu>

        {/* Search Bar */}
        <div className="flex items-center justify-center h-10 px-2.5 bg-[#472326] rounded-lg overflow-hidden">
          <div className="relative w-full h-full">
            <div className="w-full h-full bg-[url(/vector---0.svg)] bg-[100%_100%]" />
          </div>
        </div>

        {/* User Avatar */}
        <Link to="/profile">
          <Avatar className="w-10 h-10 hover:opacity-80 transition-opacity">
            <AvatarImage src="..//depth-4--frame-2.png" alt="User profile" />
          </Avatar>
        </Link>
      </div>
    </header>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/AddDateSection/index.ts">
export { AddDateSection } from "./AddDateSection";
</file>

<file path="src/screens/StitchDesign/sections/HeaderSection/HeaderSection.tsx">
import React from "react";
import { Input } from "../../../../components/ui/input";
import { Label } from "../../../../components/ui/label";

export const HeaderSection = (): JSX.Element => {
  return (
    <div className="flex flex-wrap max-w-[480px] items-end gap-4 px-4 py-3 relative">
      <div className="flex flex-col min-w-40 items-start relative flex-1 grow">
        <div className="flex flex-col items-start pb-2 w-full">
          <Label
            htmlFor="cinema-location"
            className="font-medium text-white text-base leading-6 font-['Plus_Jakarta_Sans',Helvetica]"
          >
            Location
          </Label>
        </div>

        <div className="relative w-full">
          <Input
            id="cinema-location"
            placeholder="Cinema name"
            className="h-14 p-4 bg-[#472326] rounded-lg text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica] font-normal text-base leading-6 placeholder:text-[#c69193] border-none focus-visible:ring-0 focus-visible:ring-offset-0"
          />
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/HeaderSection/index.ts">
export { HeaderSection } from "./HeaderSection";
</file>

<file path="src/screens/StitchDesign/sections/MainFormSection/index.ts">
export { MainFormSection } from "./MainFormSection";
</file>

<file path="src/screens/StitchDesign/sections/MovieSelectionSection/index.ts">
export { MovieSelectionSection } from "./MovieSelectionSection";
</file>

<file path="src/screens/StitchDesign/sections/MovieSelectionSection/MovieSelectionSection.tsx">
import React from "react";
import { Progress } from "../../../../components/ui/progress";

export const MovieSelectionSection = (): JSX.Element => {
  return (
    <div className="flex flex-col items-start w-full">
      <div className="flex items-center justify-between p-4 w-full">
        <div className="flex items-center">
          <div className="flex flex-col">
            <h3 className="font-medium text-white text-base leading-6 font-['Plus_Jakarta_Sans',Helvetica]">
              Her Rating
            </h3>
          </div>
        </div>

        <div className="flex h-4 items-center gap-4 flex-1">
          <Progress
            value={70}
            className="h-1 flex-1 bg-[#663335] rounded-sm"
            indicatorClassName="bg-[#e82833] rounded-sm"
          />

          <div className="flex flex-col">
            <span className="font-normal text-white text-sm leading-[21px] font-['Plus_Jakarta_Sans',Helvetica]">
              5
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/PhotoUploadSection/index.ts">
export { PhotoUploadSection } from "./PhotoUploadSection";
</file>

<file path="src/screens/StitchDesign/sections/PhotoUploadSection/PhotoUploadSection.tsx">
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import React from "react";
import { Button } from "../../../../components/ui/button";
import { Calendar } from "../../../../components/ui/calendar";
import { Label } from "../../../../components/ui/label";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "../../../../components/ui/popover";

export const PhotoUploadSection = (): JSX.Element => {
  const [date, setDate] = React.useState<Date | undefined>(undefined);

  return (
    <div className="flex flex-wrap max-w-[480px] items-end gap-4 px-4 py-3">
      <div className="flex flex-col min-w-40 items-start flex-1 grow">
        <div className="flex flex-col items-start pb-2 w-full">
          <Label
            htmlFor="date"
            className="font-medium text-white text-base leading-6 font-['Plus_Jakarta_Sans',Helvetica]"
          >
            Date
          </Label>
        </div>

        <Popover>
          <PopoverTrigger asChild>
            <Button
              id="date"
              variant="outline"
              className="h-14 w-full justify-start p-4 bg-[#472326] border-none rounded-lg text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica] font-normal text-base leading-6 hover:bg-[#472326]/90 hover:text-[#c69193]"
            >
              {date ? format(date, "PPP") : <span>Select&nbsp;&nbsp;date</span>}
              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              mode="single"
              selected={date}
              onSelect={setDate}
              initialFocus
            />
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/RatingsSection/index.ts">
export { RatingsSection } from "./RatingsSection";
</file>

<file path="src/screens/StitchDesign/sections/RatingsSection/RatingsSection.tsx">
import React from "react";
import { Card, CardContent } from "../../../../components/ui/card";
import { Progress } from "../../../../components/ui/progress";

export const RatingsSection = (): JSX.Element => {
  return (
    <Card className="w-full bg-transparent border-0">
      <CardContent className="flex items-center justify-between p-4 w-full">
        <div className="font-medium text-white text-base font-['Plus_Jakarta_Sans',Helvetica]">
          His Rating
        </div>

        <div className="flex items-center gap-4 flex-1">
          <Progress
            value={80}
            className="h-1 flex-1 bg-[#663335] rounded-sm"
            indicatorClassName="bg-[#e82833] rounded-sm"
          />
          <span className="font-normal text-white text-sm font-['Plus_Jakarta_Sans',Helvetica] leading-[21px]">
            4
          </span>
        </div>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/ReviewsSection/index.ts">
export { ReviewsSection } from "./ReviewsSection";
</file>

<file path="src/screens/StitchDesign/sections/ReviewsSection/ReviewsSection.tsx">
import React from "react";
import { Button } from "../../../../components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../../../../components/ui/card";

export const ReviewsSection = (): JSX.Element => {
  return (
    <section className="flex flex-col items-start p-4 w-full">
      <Card className="w-full flex flex-col items-center gap-6 px-6 py-14 rounded-lg border-2 border-dashed border-[#663335] bg-transparent">
        <CardHeader className="p-0 space-y-2 text-center">
          <CardTitle className="font-bold text-white text-lg leading-[23px] font-['Plus_Jakarta_Sans',Helvetica]">
            Upload Photos
          </CardTitle>
          <CardDescription className="font-normal text-white text-sm leading-[21px] font-['Plus_Jakarta_Sans',Helvetica]">
            Add photos to remember your date
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          <Button className="w-[84px] h-10 bg-[#472326] rounded-lg font-bold text-white text-sm font-['Plus_Jakarta_Sans',Helvetica]">
            Upload
          </Button>
        </CardContent>
      </Card>
    </section>
  );
};
</file>

<file path="src/screens/StitchDesign/sections/UserInputSection/index.ts">
export { UserInputSection } from "./UserInputSection";
</file>

<file path="src/screens/StitchDesign/sections/UserInputSection/UserInputSection.tsx">
import React from "react";
import { Card, CardContent } from "../../../../components/ui/card";

export const UserInputSection = (): JSX.Element => {
  const movieData = {
    category: "Movie",
    title: "The Enchanted Forest",
    details: "2023 · Fantasy/Adventure",
    imageUrl: "..//depth-6--frame-1.png",
  };

  return (
    <Card className="border-0 p-4 w-full">
      <CardContent className="flex items-start justify-between p-0 gap-4 rounded-lg">
        <div className="flex flex-col items-start gap-1">
          <p className="font-normal text-sm text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica] leading-[21px]">
            {movieData.category}
          </p>
          <h3 className="font-bold text-base text-white font-['Plus_Jakarta_Sans',Helvetica] leading-5 mt-0">
            {movieData.title}
          </h3>
          <p className="font-normal text-sm text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica] leading-[21px]">
            {movieData.details}
          </p>
        </div>

        <div
          className="flex-1 h-[171px] rounded-lg bg-cover bg-center"
          style={{ backgroundImage: `url(${movieData.imageUrl})` }}
          aria-label="Movie poster for The Enchanted Forest"
        />
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/screens/StitchDesign/StitchDesign.tsx">
import React from "react";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Textarea } from "../../components/ui/textarea";
import { AddDateSection } from "./sections/AddDateSection";
import { HeaderSection } from "./sections/HeaderSection";
import { MainFormSection } from "./sections/MainFormSection";
import { MovieSelectionSection } from "./sections/MovieSelectionSection";
import { PhotoUploadSection } from "./sections/PhotoUploadSection";
import { RatingsSection } from "./sections/RatingsSection";
import { ReviewsSection } from "./sections/ReviewsSection";
import { UserInputSection } from "./sections/UserInputSection";

export const StitchDesign = (): JSX.Element => {
  // Review data for mapping
  const reviews = [
    { title: "Her Review", id: "her-review" },
    { title: "His Review", id: "his-review" },
  ];

  return (
    <div className="flex flex-col bg-white">
      <div className="flex flex-col w-full bg-[#211111]">
        <div className="flex flex-col w-full">
          <AddDateSection />

          <div className="flex justify-center px-40 py-5 w-full">
            <div className="flex flex-col max-w-[960px] w-[960px] py-5">
              <div className="flex flex-wrap justify-around gap-[12px] p-4 w-full">
                <div className="flex flex-col w-72">
                  <h1 className="[font-family:'Plus_Jakarta_Sans',Helvetica] font-bold text-white text-[32px] leading-10">
                    Add a Date
                  </h1>
                </div>
              </div>

              <MainFormSection />
              <UserInputSection />
              <PhotoUploadSection />
              <HeaderSection />
              <MovieSelectionSection />
              <RatingsSection />

              <div className="flex flex-col pt-4 pb-2 px-4 w-full">
                <h2 className="[font-family:'Plus_Jakarta_Sans',Helvetica] font-bold text-white text-lg leading-[23px]">
                  Your Reviews
                </h2>
              </div>

              {reviews.map((review) => (
                <div
                  key={review.id}
                  className="flex flex-wrap max-w-[480px] gap-4 px-4 py-3"
                >
                  <Card className="flex flex-col min-w-40 flex-1 bg-transparent border-0">
                    <div className="flex-col pt-0 pb-2 px-0 w-full">
                      <h3 className="[font-family:'Plus_Jakarta_Sans',Helvetica] font-medium text-white text-base leading-6">
                        {review.title}
                      </h3>
                    </div>
                    <CardContent className="p-0">
                      <Textarea
                        className="min-h-36 bg-[#472326] rounded-lg text-white border-0 resize-none"
                        placeholder={`Enter ${review.title.toLowerCase()}`}
                      />
                    </CardContent>
                  </Card>
                </div>
              ))}

              <ReviewsSection />

              <div className="flex px-4 py-3 w-full">
                <Button className="flex min-w-[84px] max-w-[480px] h-10 flex-1 justify-center bg-[#e82833] rounded-lg text-white hover:bg-[#c62229]">
                  <span className="[font-family:'Plus_Jakarta_Sans',Helvetica] font-bold text-sm text-center leading-[21px]">
                    Add Date
                  </span>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/Wishlist/index.ts">
export { Wishlist } from "./Wishlist";
</file>

<file path="src/screens/Wishlist/Wishlist.tsx">
import React from "react";
import { AddDateSection } from "../StitchDesign/sections/AddDateSection";
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card";

export const Wishlist = (): JSX.Element => {
  const wishlistMovies = [
    { title: "Dune: Part Two", year: "2024", genre: "Sci-Fi/Adventure" },
    { title: "Oppenheimer", year: "2023", genre: "Biography/Drama" },
    { title: "Spider-Man: Across the Spider-Verse", year: "2023", genre: "Animation/Action" },
  ];

  return (
    <div className="flex flex-col bg-white min-h-screen">
      <div className="flex flex-col w-full bg-[#211111] min-h-screen">
        <AddDateSection />
        
        <div className="flex justify-center px-40 py-5 w-full">
          <div className="flex flex-col max-w-[960px] w-[960px] py-5">
            <div className="flex flex-wrap justify-around gap-[12px] p-4 w-full">
              <div className="flex flex-col w-72">
                <h1 className="font-bold text-white text-[32px] leading-10 font-['Plus_Jakarta_Sans',Helvetica]">
                  My Wishlist
                </h1>
                <p className="font-normal text-[#c69193] text-base font-['Plus_Jakarta_Sans',Helvetica] mt-2">
                  Movies you want to watch on future dates
                </p>
              </div>
            </div>

            <div className="grid gap-4 p-4">
              {wishlistMovies.map((movie, index) => (
                <Card key={index} className="bg-[#472326] border-0">
                  <CardHeader>
                    <CardTitle className="text-white font-['Plus_Jakarta_Sans',Helvetica]">
                      {movie.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-[#c69193] font-['Plus_Jakarta_Sans',Helvetica]">
                      {movie.year} · {movie.genre}
                    </p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="tailwind.config.js">
module.exports = {
  content: [
    "./src/**/*.{html,js,ts,jsx,tsx}",
    "app/**/*.{ts,tsx}",
    "components/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: [
          "ui-sans-serif",
          "system-ui",
          "sans-serif",
          '"Apple Color Emoji"',
          '"Segoe UI Emoji"',
          '"Segoe UI Symbol"',
          '"Noto Color Emoji"',
        ],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
    container: { center: true, padding: "2rem", screens: { "2xl": "1400px" } },
  },
  plugins: [],
  darkMode: ["class"],
};
</file>

<file path="tailwind.css">
@tailwind components;
@tailwind utilities;

@layer components {
  .all-\[unset\] {
    all: unset;
  }
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: transparent;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: transparent;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src"
  ]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": [
      "ES2023"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "vite.config.ts"
  ]
}
</file>

<file path="vite.config.ts">
import react from "@vitejs/plugin-react";
import tailwind from "tailwindcss";
import { defineConfig } from "vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  base: "./",
  css: {
    postcss: {
      plugins: [tailwind()],
    },
  },
});
</file>

<file path="api/movies-search.ts">
import type { VercelRequest, VercelResponse } from '@vercel/node';
import fetch from 'node-fetch';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Enable CORS for frontend requests
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { q } = req.query;
  // Better validation
  if (!q || typeof q !== 'string' || q.trim().length === 0) {
    return res.status(400).json({ 
      error: 'Missing or invalid query parameter: q',
      message: 'Please provide a valid search query'
    });
  }

  try {
    // Hardcoded OMDB API key
    const apiKey = 'a47ebd1f';
    let apiUrl: string;
    if (apiKey) {
      // Use OMDB API if key is available
      apiUrl = `http://www.omdbapi.com/?apikey=${apiKey}&s=${encodeURIComponent(q.trim())}&type=movie`;
    } else {
      // Fallback to your current API
      apiUrl = `https://imdb.iamidiotareyoutoo.com/search?q=${encodeURIComponent(q.trim())}`;
    }

    const apiRes = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
      },
      // @ts-ignore
      timeout: 10000, // 10 second timeout
    });

    if (!apiRes.ok) {
      throw new Error(`API responded with status: ${apiRes.status}`);
    }

    const data = await apiRes.json();
    // Debug: log the data structure
    // console.log('API Response:', JSON.stringify(data, null, 2));

    // Handle different response formats
    let results = [];
    if (apiKey && data.Search) {
      // OMDB API format
      results = data.Search.map((movie: any) => ({
        title: movie.Title,
        year: movie.Year,
        poster: movie.Poster !== 'N/A' ? movie.Poster : null,
        imdbID: movie.imdbID,
        type: movie.Type
      }));
    } else if (data.description && Array.isArray(data.description)) {
      // Your current API format
      results = data.description;
    } else if (data.results && Array.isArray(data.results)) {
      // Alternative format
      results = data.results;
    } else if (Array.isArray(data)) {
      // Direct array response
      results = data;
    } else {
      results = [];
    }

    // Add debug info to the response for troubleshooting
    return res.status(200).json({ 
      results,
      total: results.length,
      query: q.trim(),
      debug: { raw: data }
    });

  } catch (error: any) {
    return res.status(500).json({ 
      error: 'Failed to fetch movie data', 
      details: error.message,
      query: q
    });
  }
}
</file>

<file path="README.md">
# Anima Project

Welcome! This project has been automatically generated by [Anima](https://animaapp.com/).

## Backend API (Vercel Serverless Functions)
- All backend endpoints are implemented as serverless functions in the `api/` directory inside this `project/` folder.
- Each file in `api/` is an endpoint (e.g., `api/wishlist.ts` → `/api/wishlist`).
- Designed for Vercel deployment (no Express server, no local file uploads).
- Uses PostgreSQL for data storage (see `.env` for connection string).

## Getting started

> **Prerequisites:**
> The following steps require [NodeJS](https://nodejs.org/en/) to be installed on your system, so please
> install it beforehand if you haven't already.

To get started with your project, you'll first need to install the dependencies with:

```
npm install
```

Then, you'll be able to run a development version of the project with:

```
npm run dev
```

After a few seconds, your project should be accessible at the address
[http://localhost:5173/](http://localhost:5173/)


If you are satisfied with the result, you can finally build the project for release with:

```
npm run build
```
</file>

<file path="src/screens/StitchDesign/sections/MainFormSection/MainFormSection.tsx">
import React, { useState, useEffect, useRef } from "react";
import { Input } from "../../../../components/ui/input";
import { Label } from "../../../../components/ui/label";

export const MainFormSection = (): JSX.Element => {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const [total, setTotal] = useState<number>(0);
  const debounceRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!query) {
      setResults([]);
      setShowDropdown(false);
      setTotal(0);
      return;
    }
    setLoading(true);
    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      fetch(`/api/movies-search?q=${encodeURIComponent(query)}`)
        .then((res) => res.json())
        .then((data) => {
          setResults(data?.results || []);
          setTotal(data?.total || 0);
          setShowDropdown(true);
        })
        .catch(() => {
          setResults([]);
          setTotal(0);
        })
        .finally(() => setLoading(false));
    }, 400);
    // eslint-disable-next-line
  }, [query]);

  // Helper to display movie title and year for both OMDB and fallback API formats
  const getMovieDisplay = (movie: any) => {
    if (movie.title && movie.year) return `${movie.title} (${movie.year})`;
    if (movie.Title && movie.Year) return `${movie.Title} (${movie.Year})`;
    if (movie.title) return movie.title;
    if (movie.Title) return movie.Title;
    return "Unknown Title";
  };

  return (
    <div className="flex flex-wrap max-w-[480px] items-end gap-4 px-4 py-3">
      <div className="flex flex-col min-w-40 items-start w-full relative">
        <div className="w-full mb-2">
          <Label
            htmlFor="movie-search"
            className="font-medium text-white text-base leading-6 font-['Plus_Jakarta_Sans',Helvetica]"
          >
            Search for a movie
          </Label>
        </div>

        <Input
          id="movie-search"
          placeholder="Movie title"
          value={query}
          onChange={e => setQuery(e.target.value)}
          className="h-14 px-4 py-4 bg-[#472326] rounded-lg text-base font-['Plus_Jakarta_Sans',Helvetica] font-normal text-[#c69193] placeholder:text-[#c69193] border-none focus-visible:ring-0 focus-visible:ring-offset-0"
          autoComplete="off"
        />
        {showDropdown && results.length > 0 && (
          <div className="absolute top-20 left-0 w-full bg-[#472326] rounded-lg shadow-lg z-10 max-h-60 overflow-y-auto">
            {results.map((movie, idx) => (
              <div key={movie.imdbID || movie.IMDB_ID || movie.id || idx} className="px-4 py-2 text-[#c69193] hover:bg-[#663335] cursor-pointer">
                {getMovieDisplay(movie)}
              </div>
            ))}
            <div className="px-4 py-2 text-xs text-[#c69193] border-t border-[#663335]">{total} result(s)</div>
          </div>
        )}
        {loading && <div className="absolute top-20 left-0 w-full text-center text-[#c69193]">Loading...</div>}
      </div>
    </div>
  );
};
</file>

<file path="package.json">
{
  "version": "1.0.0",
  "source": "./index.html",
  "type": "module",
  "name": "anima-project",
  "description": "A React project automatically generated by Anima using the Shadcn UI library",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@vercel/node": "^5.3.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "2.1.1",
    "lucide-react": "^0.453.0",
    "node-fetch": "^3.3.2",
    "react": "^18.2.0",
    "react-day-picker": "9.3.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.1",
    "tailwind-merge": "2.5.4"
  },
  "devDependencies": {
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "@vitejs/plugin-react": "4.3.4",
    "esbuild": "0.24.0",
    "globals": "15.12.0",
    "tailwindcss": "3.4.16",
    "vite": "6.0.4"
  },
  "alias": {
    "@/*": "./src/components/ui/$1"
  }
}
</file>

</files>
